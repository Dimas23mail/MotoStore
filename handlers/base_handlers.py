from aiogram.filters import CommandStart, StateFilter, Command
from aiogram import Router, types, F
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state

from config import ADMIN_ID, moto_db
from keyboards import (start_client_reply_keyboard, start_admin_reply_keyboard, admin_main_menu,
                       admin_change_place_info, admin_change_category_products)
from storage import AdminToolsModule, ClientToolsModule

router = Router(name=__name__)


@router.message(Command("cancel"))
@router.message(F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
@router.message(F.text.casefold() == "–æ—Ç–º–µ–Ω–∞ üîô")
@router.message(F.text.casefold() == "cancel")
@router.message(F.text.casefold() == "–∑–∞–≤–µ—Ä—à–∏—Ç—å")
async def cancel_base_handler(message: types.Message, state: FSMContext):

    changing_category_states = (AdminToolsModule.adding_category, AdminToolsModule.deleting_category)

    changing_category_menu_states = (AdminToolsModule.change_category_menu, )

    print("cancel button")
    current_state = await state.get_state()
    print(f"current state = {current_state}")

    keyboard = admin_change_category_products
    text = "–í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é üëá:"

    if current_state in changing_category_states:
        keyboard = admin_change_category_products
        await state.set_state(AdminToolsModule.change_category_menu)
        text = "–í—ã –≤—ã—à–ª–∏ –≤ –º–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é üëá:"
    elif current_state in changing_category_menu_states:
        keyboard = admin_main_menu
        await state.set_state(AdminToolsModule.main_menu_admin)
        text = "–í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é üëá:"

    await message.answer(text=text,
                         reply_markup=keyboard)


@router.message(CommandStart())
async def command_start(message: types.Message, state: FSMContext):
    print(f"–ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name}, id: {message.from_user.id}")
    await state.clear()

    if message.from_user.id in ADMIN_ID:
        keyboard = start_admin_reply_keyboard
        await state.set_state(AdminToolsModule.main_state_admin)
        async with moto_db:
            await moto_db.make_db()
    else:
        keyboard = start_client_reply_keyboard
        await state.set_state(ClientToolsModule.main_state_client)
    await message.answer(text="üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–¥–∞–∂–µ –º–æ—Ç–æ—Ü–∏–∫–ª–æ–≤, –º–æ–ø–µ–¥–æ–≤ –∏ –∑–∞–ø—á–∞—Å—Ç–µ–π. "
                              "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è —Å–µ–±—è, –∞ —Ç–∞–∫–∂–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã "
                              "–¥–ª—è –µ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.\nüö¥‚Äç‚ôÇÔ∏è –ß—Ç–æ —è –º–æ–≥—É –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å?\n\n‚Ä¢	üì¶ –®–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä –º–æ—Ç–æ—Ü–∏–∫–ª–æ–≤ "
                              "–∏ –º–æ–ø–µ–¥–æ–≤ ‚Äî –Ω–æ–≤—ã–µ –∏ –±/—É –º–æ–¥–µ–ª–∏ –æ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤.\n‚Ä¢	üîß –ó–∞–ø—á–∞—Å—Ç–∏ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã ‚Äî "
                              "–≤—Å–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –≤–∞—à–µ–≥–æ –¥–≤—É—Ö–∫–æ–ª–µ—Å–Ω–æ–≥–æ –¥—Ä—É–≥–∞.\n‚Ä¢	üí∞ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –∞–∫—Ü–∏–∏ "
                              "‚Äî —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞—à–∏–º–∏ —Å–∫–∏–¥–∫–∞–º–∏ –∏ –≤—ã–≥–æ–¥–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏.\nüåü –ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n\n"
                              "üöÄ –î–∞–≤–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏–º—Å—è –≤ –≤–∞—à–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥–≤—É—Ö –∫–æ–ª–µ—Å–∞—Ö!",
                         reply_markup=keyboard,
                         parse_mode=ParseMode.HTML)


@router.message(default_state)
async def default_empty_message(message: types.Message):
    if message.from_user.id in ADMIN_ID:
        keyboard = start_admin_reply_keyboard
    else:
        keyboard = start_client_reply_keyboard
    await message.answer(text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞...",
                         reply_markup=keyboard
                         )
