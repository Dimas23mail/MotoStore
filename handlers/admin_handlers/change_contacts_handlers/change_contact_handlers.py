from aiogram import F, types, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from keyboards import admin_change_contact, admin_finish_action
from keyboards.reply_keyboard import get_keyboard
from storage import AdminToolsModule
from user_filters import telephone_validate
from config import moto_db
from utils import make_string_for_output, StorageForChangingContacts

router = Router()


@router.callback_query(StorageForChangingContacts.filter(F.reaction == "change contact"))
async def deleting_contact_reaction(callback: CallbackQuery, callback_data: StorageForChangingContacts,
                                    state: FSMContext) -> None:
    await callback.answer(text=f"–ò–∑–º–µ–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç.",
                          show_alert=False)
    await callback.message.edit_text(text="–ö–æ–Ω—Ç–∞–∫—Ç –≤ —Å—Ç–∞—Ç—É—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è...", reply_markup=None)

    contact_id = callback_data.contact_id
    await state.update_data(contact_id=contact_id)
    try:
        async with moto_db:
            contact_tuple = await moto_db.get_one_contact(contact_id=contact_id)
            text_from_tuple = make_string_for_output(source=contact_tuple[1:])
            text = f"–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç:\n{text_from_tuple}\n\n–ö–∞–∫–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?üëá:"
            keyboard = admin_change_contact
    except Exception as ex:
        print(f"Exception:\n{ex}")
        text = "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ."
        keyboard = get_keyboard("–ó–∞–≤–µ—Ä—à–∏—Ç—å",
                                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                                sizes=(1,))
    await callback.message.answer(text=text,
                                  reply_markup=keyboard)


@router.message(AdminToolsModule.change_contact_main, F.text.casefold() == "–Ω–∞–∑–≤–∞–Ω–∏–µ ü™ß")
async def start_changing_title_contact(message: types.Message, state: FSMContext) -> None:
    await state.set_state(AdminToolsModule.change_contact_title)
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞:", reply_markup=admin_finish_action)


@router.message(AdminToolsModule.change_contact_main, F.text.casefold() == "–≥–æ—Ä–æ–¥ üèô")
async def start_changing_city_contact(message: types.Message, state: FSMContext) -> None:
    await state.set_state(AdminToolsModule.change_contact_city)
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–∞:", reply_markup=admin_finish_action)


@router.message(AdminToolsModule.change_contact_main, F.text.casefold() == "–∞–¥—Ä–µ—Å üèò")
async def start_changing_address_contact(message: types.Message, state: FSMContext) -> None:
    await state.set_state(AdminToolsModule.change_contact_address)
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞:", reply_markup=admin_finish_action)


@router.message(AdminToolsModule.change_contact_main, F.text.casefold() == "—Ç–µ–ª–µ—Ñ–æ–Ω ‚òéÔ∏è")
async def start_changing_phone_contact(message: types.Message, state: FSMContext) -> None:
    await state.set_state(AdminToolsModule.change_contact_phone)
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=admin_finish_action)


@router.message(AdminToolsModule.change_contact_main)
async def wrong_changing_contact(message: types.Message) -> None:
    #  await state.set_state(AdminToolsModule.change_contact_main)
    await message.answer(text="–Ø –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é! –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=admin_change_contact)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏
@router.message(AdminToolsModule.change_contact_title, F.text)
async def changing_title_contact(message: types.Message, state: FSMContext) -> None:
    await state.set_state(AdminToolsModule.change_contact_main)
    current_data = await state.get_data()
    contact_id = current_data["contact_id"]
    async with moto_db:
        try:
            async with moto_db:
                if await moto_db.update_contact(contact_id=contact_id, contact_title=message.text):
                    text = "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ!\n–ö–∞–∫–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?üëá:"
                else:
                    text = "–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω contact_id"
        except Exception as ex:
            print(f"Exception in contact title changer: {ex}")
            text = "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ."
    await message.answer(text=text, reply_markup=admin_change_contact)


@router.message(AdminToolsModule.change_contact_title, F.text)
async def wrong_changing_title_contact(message: types.Message) -> None:
    await message.answer(text="–Ø –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞:",
                         reply_markup=admin_finish_action)


@router.message(AdminToolsModule.change_contact_city, F.text)
async def changing_city_contact(message: types.Message, state: FSMContext) -> None:
    await state.set_state(AdminToolsModule.change_contact_main)
    current_data = await state.get_data()
    contact_id = current_data["contact_id"]
    async with moto_db:
        try:
            async with moto_db:
                if await moto_db.update_contact(contact_id=contact_id, contact_city=message.text):
                    text = "–ì–æ—Ä–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω!\n–ö–∞–∫–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?üëá:"
                else:
                    text = "–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω contact_id"
        except Exception as ex:
            print(f"Exception in contact title changer: {ex}")
            text = "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ."
    await message.answer(text=text, reply_markup=admin_change_contact)


@router.message(AdminToolsModule.change_contact_city, F.text)
async def wrong_changing_city_contact(message: types.Message) -> None:
    await message.answer(text="–Ø –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é! –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–∞:",
                         reply_markup=admin_finish_action)


@router.message(AdminToolsModule.change_contact_address, F.text)
async def changing_address_contact(message: types.Message, state: FSMContext) -> None:
    await state.set_state(AdminToolsModule.change_contact_main)
    current_data = await state.get_data()
    contact_id = current_data["contact_id"]
    async with moto_db:
        try:
            async with moto_db:
                if await moto_db.update_contact(contact_id=contact_id, contact_address=message.text):
                    text = "–ê–¥—Ä–µ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω!\n–ö–∞–∫–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?üëá:"
                else:
                    text = "–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω contact_id"
        except Exception as ex:
            print(f"Exception in contact title changer: {ex}")
            text = "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ."
    await message.answer(text=text, reply_markup=admin_change_contact)


@router.message(AdminToolsModule.change_contact_city, F.text)
async def wrong_changing_address_contact(message: types.Message) -> None:
    await message.answer(text="–Ø –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é! –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞:",
                         reply_markup=admin_finish_action)


@router.message(AdminToolsModule.change_contact_phone, F.func(telephone_validate).as_("phone"))
async def changing_phone_contact(message: types.Message, state: FSMContext, phone: str) -> None:
    await state.set_state(AdminToolsModule.change_contact_main)
    current_data = await state.get_data()
    contact_id = current_data["contact_id"]
    async with moto_db:
        try:
            async with moto_db:
                if await moto_db.update_contact(contact_id=contact_id, contact_phone=phone):
                    text = "–¢–µ–ª–µ—Ñ–æ–Ω –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω!\n–ö–∞–∫–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?üëá:"
                else:
                    text = "–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω contact_id"
        except Exception as ex:
            print(f"Exception in contact title changer: {ex}")
            text = "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ."
    await message.answer(text=text, reply_markup=admin_change_contact)


@router.message(AdminToolsModule.change_contact_phone)
async def wrong_changing_phone_contact(message: types.Message) -> None:
    await message.answer(text="–Ø –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é! –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–Ω—Ç–∞–∫—Ç–∞:",
                         reply_markup=admin_finish_action)
