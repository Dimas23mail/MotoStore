from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from config import moto_db
from keyboards import admin_change_place_info
from keyboards.reply_keyboard import get_keyboard
from storage import AdminToolsModule
from utils import StorageForChangePlaceData, StorageForChangeImageData, deleting_photo_from_list

router = Router()


@router.message(Command("back"))
@router.message(F.text.casefold() == "–Ω–∞–∑–∞–¥")
@router.message(F.text.casefold() == "–Ω–∞–∑–∞–¥ üîô")
@router.message(F.text.casefold() == "back")
async def back_adding_place_handler(message: types.Message, state: FSMContext):
    current_data = await state.get_data()
    current_step_list = current_data["step"]
    caption = ""
    text = "–Ω–µ –ø–æ–ø–∞–ª –≤ state"
    button_name = "–û—Ç–º–µ–Ω–∞ üîô"
    current_step = current_step_list.pop()
    if current_step in (AdminToolsModule.input_place_name,):
        caption = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏:"
        text = "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏:"
    elif current_step in (AdminToolsModule.input_place_description,):
        caption = "–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏:"
        text = "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏:"
        button_name = "–ù–∞–∑–∞–¥ üîô"
    elif current_step in (AdminToolsModule.input_place_city,):
        caption = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:"
        text = "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:"
        button_name = "–ù–∞–∑–∞–¥ üîô"
    elif current_step in (AdminToolsModule.input_place_address,):
        caption = "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:"
        text = "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:"
        button_name = "–ù–∞–∑–∞–¥ üîô"
    elif current_step in (AdminToolsModule.input_place_telephone,):
        caption = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω:"
        text = "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω:"
        button_name = "–ù–∞–∑–∞–¥ üîô"

    await state.set_state(current_step)
    keyboard = get_keyboard(button_name,
                            placeholder=caption,
                            sizes=(1,))
    await message.answer(text=text, reply_markup=keyboard)


@router.callback_query(StorageForChangePlaceData.filter(F.reaction == "change place"))
async def change_place_button_reaction(callback: CallbackQuery, callback_data: StorageForChangePlaceData,
                                       state: FSMContext):
    await callback.answer(text=f"–í–Ω–æ—Å–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–æ—â–∞–¥–∫–µ.",
                          show_alert=False)
    current_data = await state.get_data()
    if current_data["has_photo"]:
        await callback.message.edit_caption(caption="–í–Ω–æ—Å—è—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–æ—â–∞–¥–∫–µ...", reply_markup=None)

    keyboard = admin_change_place_info
    await callback.message.answer(text="–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å\n(–≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é)üëá:",
                                  reply_markup=keyboard)
    await state.update_data(place_id=callback_data.place_id)
    await state.set_state(AdminToolsModule.start_change_place)


@router.callback_query(StorageForChangeImageData.filter(F.reaction == "delete photo"))
async def deleting_photo_place_reaction(callback: CallbackQuery, callback_data: StorageForChangeImageData,
                                        state: FSMContext):
    await callback.answer(text=f"–í–Ω–æ—Å–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.",
                          show_alert=False)
    await callback.message.edit_caption(caption="–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É–¥–∞–ª–µ–Ω–∞...", reply_markup=None)
    #  print(f"–ü–µ—Ä–µ—Ö–≤–∞—Ç–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ...")
    place_id = callback_data.place_id
    element_id = callback_data.photo_id
    current_data = await state.get_data()
    photo_list = current_data["list_photos"]
    photo_string = deleting_photo_from_list(photo_list=photo_list, photo_id=element_id)
    try:
        async with moto_db:
            await moto_db.change_place_photos(photo_string, place_id)
            text = "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É–¥–∞–ª–µ–Ω–∞\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ)üëá:"
    except Exception as ex:
        print(f"Exception:\n{ex}")
        text = "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ."

    keyboard = get_keyboard("–ó–∞–∫–æ–Ω—á–∏—Ç—å",
                            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                            sizes=(1,))
    await callback.message.answer(text=text,
                                  reply_markup=keyboard)
    #  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω—É–∂–Ω—ã–π state
    await state.set_state(AdminToolsModule.change_place_photo)


@router.callback_query(StorageForChangeImageData.filter(F.reaction == "delete place"))
async def deleting_place_reaction(callback: CallbackQuery, callback_data: StorageForChangeImageData, state: FSMContext):
    await callback.answer(text=f"–£–¥–∞–ª—è–µ–º –ø–ª–æ—â–∞–¥–∫—É",
                          show_alert=False)
    await callback.message.edit_caption(caption="–ü–ª–æ—â–∞–¥–∫–∞ —É–¥–∞–ª–µ–Ω–∞...", reply_markup=None)
    print(f"–ü–µ—Ä–µ—Ö–≤–∞—Ç–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ place...")
    place_id = callback_data.place_id

    try:
        async with moto_db:
            await moto_db.deleting_place(place_id)
            text = "–ü–ª–æ—â–∞–¥–∫–∞ —É–¥–∞–ª–µ–Ω–∞\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ)üëá:"
    except Exception as ex:
        print(f"Exception:\n{ex}")
        text = "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ."

    keyboard = get_keyboard("–ó–∞–≤–µ—Ä—à–∏—Ç—å",
                            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                            sizes=(1,))
    await callback.message.answer(text=text,
                                  reply_markup=keyboard)
    #  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω—É–∂–Ω—ã–π state
    await state.set_state(AdminToolsModule.deleting_place)
