from aiogram import F, types, Router
from aiogram.fsm.context import FSMContext

from keyboards import cancel_keyboard, action_with_record_ikb
from keyboards.reply_keyboard import get_keyboard, get_list_keyboard
from storage import AdminToolsModule

from config import moto_db
from utils import make_string_for_output

router = Router()


@router.message(AdminToolsModule.change_promo_menu, F.text.casefold() == "–¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ-–∞–∫—Ü–∏—é ‚ûï")
async def adding_promo_menu_handler(message: types.Message, state: FSMContext):
    await state.set_state(AdminToolsModule.adding_promo)
    try:
        async with moto_db:
            promo_list = await moto_db.get_all_promo()
    except Exception as ex:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–π: {ex}")
    await state.update_data(promo_list=promo_list)
    if promo_list:
        buttons = set()
        for i in promo_list:
            buttons.add(i[1])
        await state.update_data(buttons_set=buttons)
        buttons = list(buttons)
        text = "–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏.\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ üëá."
        keyboard = get_list_keyboard(buttons=buttons, placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", sizes=(2, ))
    else:
        text = "–ù–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–π –≤ –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç üòï.\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏."
        keyboard = cancel_keyboard
    await message.answer(text=text, reply_markup=keyboard)


@router.message(AdminToolsModule.change_promo_menu, F.text.casefold() == "—É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ-–∞–∫—Ü–∏—é ‚ùå")
async def deleting_promo_menu_handler(message: types.Message, state: FSMContext):
    await state.set_state(AdminToolsModule.deleting_promo)
    #  –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –∞–∫—Ü–∏–π + –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
    try:
        async with moto_db:
            contacts_list = await moto_db.get_all_contacts()
            if contacts_list:
                for element in contacts_list:
                    text = make_string_for_output(source=element[1:])
                    #  keyboard = action_with_record_ikb(record_id=element[0], reaction="delete contact")
                    #  await message.answer(text=text, reply_markup=keyboard)
                text = "–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ‚òùÔ∏è:"
            else:
                text = "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏."
    except Exception as ex:
        print(f"Exception in delete promo: {ex}")

    keyboard = get_keyboard("–ó–∞–≤–µ—Ä—à–∏—Ç—å",
                            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                            sizes=(1,))
    await message.answer(text=text, reply_markup=keyboard)


@router.message(AdminToolsModule.change_promo_menu, F.text.casefold() == "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–º–æ-–∫–æ–¥ üßë‚Äçüíª")
async def testing_promo_menu_handler(message: types.Message, state: FSMContext):
    #  –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–º–æ-–∫–æ–¥–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ–≥–æ –≤ –ë–î + —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    await state.set_state(AdminToolsModule.testing_promo_code)
    await state.update_data(step=[AdminToolsModule.change_contact_menu,])
    await message.answer(text="–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–º–æ-–∫–æ–¥–∞.\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ-–∫–æ–¥.",
                         reply_markup=cancel_keyboard)


@router.message(AdminToolsModule.change_promo_menu)
async def wrong_adding_promo_menu_handler(message: types.Message):
    await message.answer(text="–Ø –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
                         reply_markup=cancel_keyboard)
