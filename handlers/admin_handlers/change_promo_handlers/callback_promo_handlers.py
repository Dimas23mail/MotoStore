from aiogram import F, types, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from keyboards import admin_change_contact, admin_finish_action
from keyboards.reply_keyboard import get_keyboard
from storage import AdminToolsModule
from user_filters import telephone_validate
from config import moto_db
from utils import make_string_for_output, StorageForAddingPromoProducts

router = Router()


@router.callback_query(StorageForAddingPromoProducts.filter(F.reaction == "adding promo"))
async def adding_promo_reaction(callback: CallbackQuery, callback_data: StorageForAddingPromoProducts,
                                state: FSMContext) -> None:
    await callback.answer(text=f"–î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–æ —Ç–æ–≤–∞—Ä—É.",
                          show_alert=False)
    #  await callback.message.edit_text(text="–ö–æ–Ω—Ç–∞–∫—Ç –≤ —Å—Ç–∞—Ç—É—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è...", reply_markup=None)

    product_id = callback_data.product_id
    await state.update_data(product_id=product_id)

    try:
        async with moto_db:
            contact_tuple = await moto_db.get_one_contact(contact_id=contact_id)
            text_from_tuple = make_string_for_output(source=contact_tuple[1:])
            text = f"–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç:\n{text_from_tuple}\n\n–ö–∞–∫–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?üëá:"
            keyboard = admin_change_contact
    except Exception as ex:
        print(f"Exception:\n{ex}")
        text = "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ."
        keyboard = get_keyboard("–ó–∞–≤–µ—Ä—à–∏—Ç—å",
                                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                                sizes=(1,))
    await callback.message.answer(text=text,
                                  reply_markup=keyboard)
