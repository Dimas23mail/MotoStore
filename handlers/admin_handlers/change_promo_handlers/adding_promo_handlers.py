from aiogram import F, types, Router
from aiogram.fsm.context import FSMContext
from aiogram.utils import markdown

from keyboards import build_choice_product_for_promo
from keyboards.reply_keyboard import get_keyboard, get_list_keyboard
from storage import AdminToolsModule

from config import moto_db
from user_filters import days_validate, date_validate, discount_validate

router = Router()


@router.message(AdminToolsModule.adding_promo, F.text)
async def adding_promo_title_handler(message: types.Message, state: FSMContext):
    await state.set_state(AdminToolsModule.adding_promo_description)
    current_data = await state.get_data()
    current_promo_list = current_data["promo_list"]
    try:
        current_buttons_set = current_data["buttons_set"]
    except KeyError:
        current_buttons_set = []
    promo_title_index = 0
    step = current_data["step"]
    step.append(AdminToolsModule.adding_promo)
    await state.update_data(step=step)
    if message.text in current_buttons_set:
        for i in current_promo_list:
            if i[1] == message.text:
                promo_title_index = i[0]
        if promo_title_index != 0:
            await state.update_data(promo_title_name=message.text, promo_title_index=promo_title_index)
            text = f"–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏: {markdown.hbold(message.text)} –≤—ã–±—Ä–∞–Ω–æ.\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ü–∏–∏:"
            button_name = "–ù–∞–∑–∞–¥ üîô"
        else:
            text = f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å –∞–∫—Ü–∏–∏: {message.text}"
            button_name = "–û—Ç–º–µ–Ω–∞ üîô"
    else:
        promo_title_name = message.text
        try:
            async with moto_db:
                saved_id = await moto_db.save_new_promo_title(promo_title_name)
                print(f"saved_id = {saved_id}")
                if saved_id:
                    await state.update_data(promo_title_name=promo_title_name, promo_title_index=saved_id[0])
                    text = f"–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏: {markdown.hbold(message.text)} –≤–Ω–µ—Å–µ–Ω–æ –≤ –±–∞–∑—É.\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ü–∏–∏:"
                    button_name = "–ù–∞–∑–∞–¥ üîô"
                else:
                    text = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏ –≤ –±–∞–∑—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    button_name = "–û—Ç–º–µ–Ω–∞ üîô"
        except Exception as ex:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏ {ex}")
            text = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏ –≤ –±–∞–∑—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            button_name = "–û—Ç–º–µ–Ω–∞ üîô"
    keyboard = get_keyboard(button_name)
    await message.answer(text=text, reply_markup=keyboard)


@router.message(AdminToolsModule.adding_promo)
async def wrong_adding_promo_title_handler(message: types.Message, state: FSMContext):
    current_data = await state.get_data()
    try:
        current_buttons_set = current_data["buttons_set"]
    except KeyError:
        current_buttons_set = []
    current_buttons_set = list(current_buttons_set)
    current_buttons_set.append("–û—Ç–º–µ–Ω–∞ üîô")
    keyboard = get_list_keyboard(buttons=current_buttons_set, placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é",
                                 sizes=(2,))
    await message.answer(text="–Ø –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.",
                         reply_markup=keyboard)


@router.message(AdminToolsModule.adding_promo_description, F.text)
async def adding_promo_description_handler(message: types.Message, state: FSMContext):
    await state.set_state(AdminToolsModule.adding_promo_discount)
    current_data = await state.get_data()
    step = current_data["step"]
    step.append(AdminToolsModule.adding_promo_description)
    await state.update_data(promo_description=message.text)
    text = f"–í–≤–µ–¥–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ü–∏–∏: {markdown.hbold(message.text)}.\n–í–≤–µ–¥–∏—Ç–µ —Å–∫–∏–¥–∫—É –ø–æ –∞–∫—Ü–∏–∏ (—Å–æ –∑–Ω–∞–∫–æ–º %):"
    button_name = "–ù–∞–∑–∞–¥ üîô"
    keyboard = get_keyboard(button_name, placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–∫–∏–¥–∫—É (XX%)")
    await message.answer(text=text, reply_markup=keyboard)


@router.message(AdminToolsModule.adding_promo_description)
async def wrong_adding_promo_description_handler(message: types.Message):
    keyboard = get_keyboard("–ù–∞–∑–∞–¥ üîô", placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏")
    await message.answer(text="–Ø –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ü–∏–∏.",
                         reply_markup=keyboard)


@router.message(AdminToolsModule.adding_promo_discount, F.func(discount_validate).as_("discount"))
async def adding_promo_discount_handler(message: types.Message, state: FSMContext, discount: float):
    await state.set_state(AdminToolsModule.adding_promo_start_date)
    current_data = await state.get_data()
    step = current_data["step"]
    step.append(AdminToolsModule.adding_promo_discount)
    text = (f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –ø–æ –∞–∫—Ü–∏–∏: {markdown.hbold(discount) + '%'}.\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞–∫—Ü–∏–∏ "
            f"(–µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –¥–∞—Ç—É, —Ç–æ –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∞–∫—Ü–∏–∏ –±—É–¥–µ—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –¥–∞—Ç–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏):")
    keyboard = get_keyboard("–ù–∞–∑–∞–¥ üîô",
                            "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (dd.mm.yyyy)")
    await message.answer(text=text, reply_markup=keyboard)
    await state.update_data(promo_discount=discount)


@router.message(AdminToolsModule.adding_promo_discount)
async def wrong_adding_promo_discount_handler(message: types.Message):
    keyboard = get_keyboard("–ù–∞–∑–∞–¥ üîô", placeholder="–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)")
    await message.answer(text="–Ø –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö).",
                         reply_markup=keyboard)


@router.message(AdminToolsModule.adding_promo_start_date, F.func(date_validate).as_("date_start"))
async def adding_promo_start_date_handler(message: types.Message, state: FSMContext, date_start: str):
    await state.set_state(AdminToolsModule.adding_promo_end_date)
    current_data = await state.get_data()
    step = current_data["step"]
    step.append(AdminToolsModule.adding_promo_start_date)
    text = f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∞–∫—Ü–∏–∏: {markdown.hbold(date_start)}.\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–∫—Ü–∏–∏:"
    button_name = "–ù–∞–∑–∞–¥ üîô"
    keyboard = get_keyboard(button_name, placeholder="–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (dd.mm.yyyy)")
    await message.answer(text=text, reply_markup=keyboard)
    await state.update_data(promo_start_date=date_start)


@router.message(AdminToolsModule.adding_promo_start_date, F.text.casefold() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def adding_promo_skip_date_handler(message: types.Message, state: FSMContext):
    await state.set_state(AdminToolsModule.adding_promo_valid_length)
    current_data = await state.get_data()
    step = current_data["step"]
    step.append(AdminToolsModule.adding_promo_start_date)
    text = f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∞–∫—Ü–∏–∏: {markdown.hbold("–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")}.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–µ–π—Å—Ç–≤–∏—è –∞–∫—Ü–∏–∏:"
    button_name = "–ù–∞–∑–∞–¥ üîô"
    keyboard = get_keyboard(button_name, placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π")
    await message.answer(text=text, reply_markup=keyboard)
    await state.update_data(promo_start_date="From activate")


@router.message(AdminToolsModule.adding_promo_start_date)
async def wrong_adding_promo_start_date_handler(message: types.Message):
    keyboard = get_keyboard("–ù–∞–∑–∞–¥ üîô", placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É (dd.mm.yyyy)")
    await message.answer(text="–Ø –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞–∫—Ü–∏–∏.",
                         reply_markup=keyboard)


@router.message(AdminToolsModule.adding_promo_end_date, F.func(date_validate).as_("date_finish"))
async def adding_promo_end_date_handler(message: types.Message, state: FSMContext, date_finish: str):
    await state.set_state(AdminToolsModule.adding_promo_category)
    await state.update_data(promo_end_date=date_finish)
    current_data = await state.get_data()
    step = current_data["step"]
    step.append(AdminToolsModule.adding_promo_end_date)
    await state.update_data(promo_end_date=date_finish, category="category", valid_date_length=None)
    await __get_category_keyboard(state)
    current_data = await state.get_data()
    if current_data["buttons_category_names"]:
        button_name = current_data["buttons_category_names"]
        text = (f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–∫—Ü–∏–∏: {markdown.hbold(date_finish)}.\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤.")
        keyboard = get_list_keyboard(button_name, placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
    else:
        button_name = "–ù–∞–∑–∞–¥ üîô"
        text = (f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–∫—Ü–∏–∏: {markdown.hbold(date_finish)}.\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        keyboard = get_keyboard(button_name, placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
    await message.answer(text=text, reply_markup=keyboard)


@router.message(AdminToolsModule.adding_promo_end_date)
async def wrong_adding_promo_end_date_handler(message: types.Message):
    keyboard = get_keyboard("–ù–∞–∑–∞–¥ üîô", placeholder="–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (dd.mm.yyyy)")
    await message.answer(text="–Ø –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–∫—Ü–∏–∏.",
                         reply_markup=keyboard)


@router.message(AdminToolsModule.adding_promo_valid_length, F.func(days_validate).as_("valid_days"))
async def valid_length_promo_handler(message: types.Message, state: FSMContext, valid_days: int):
    await state.set_state(AdminToolsModule.adding_promo_category)
    current_data = await state.get_data()
    step = current_data["step"]
    step.append(AdminToolsModule.adding_promo_valid_length)
    await state.update_data(promo_end_date=None, valid_date_length=valid_days, category="category")
    await __get_category_keyboard(state)
    current_data = await state.get_data()
    if current_data["buttons_category_names"]:
        button_name = set(current_data["buttons_category_names"].copy())
        text = (f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏: {markdown.hbold(valid_days)} –¥–Ω–µ–π.\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤.")
        keyboard = get_list_keyboard(list(button_name), placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
    else:
        button_name = "–ù–∞–∑–∞–¥ üîô"
        text = (f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏: {markdown.hcode(valid_days)} –¥–Ω–µ–π.\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        keyboard = get_keyboard(button_name, placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
    await message.answer(text=text, reply_markup=keyboard)


@router.message(AdminToolsModule.adding_promo_valid_length)
async def wrong_valid_length_promo_handler(message: types.Message):
    keyboard = get_keyboard("–ù–∞–∑–∞–¥ üîô", placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏")
    await message.answer(text="–Ø –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é.\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏.",
                         reply_markup=keyboard)


@router.message(AdminToolsModule.adding_promo_category, F.text)
async def adding_promo_categories_handler(message: types.Message, state: FSMContext):
    current_data = await state.get_data()
    button_name = current_data["buttons_category_names"]
    if message.text in button_name:
        await state.set_state(AdminToolsModule.adding_promo_sub_category)
        step = current_data["step"]
        step.append(AdminToolsModule.adding_promo_category)
        await state.update_data(category="sub_category")
        category_id = 0
        for i in current_data["buttons_category_list"]:
            print(f"i = {i}; i[1] = {i[1]}; text = {message.text}")
            if i[1].casefold() == message.text.casefold():
                category_id = i[0]
                break
            else:
                print(f"Can`t find category id!")
        await state.update_data(category_id=category_id)
        await __get_category_keyboard(state, category_id)
        current_data = await state.get_data()
        #  print(f"current data cat id: {current_data}")
        button_name = current_data["buttons_category_names"].copy()
        button_name.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        button_name = set(button_name)
        if button_name:
            text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {markdown.hbold(message.text)}.\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞."
            keyboard = get_list_keyboard(list(button_name), placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        else:
            text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {markdown.hbold(message.text)}.\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞."
            keyboard = get_list_keyboard(list(button_name), placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        await message.answer(text=text, reply_markup=keyboard)
    else:
        text = f"–£–∫–∞–∑–∞–Ω–Ω–æ–π –í–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤."

        keyboard = get_list_keyboard(button_name.copy(), placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
        await message.answer(text=text, reply_markup=keyboard)


@router.message(AdminToolsModule.adding_promo_category)
async def wrong_adding_promo_categories(message: types.Message, state: FSMContext):
    current_data = await state.get_data()
    button_name = set(current_data["buttons_category_names"].copy())
    if button_name:
        button_name = list(button_name)
        text = f"–Ø –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤."
        keyboard = get_list_keyboard(button_name.copy(), placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
    else:
        button_name = "–ù–∞–∑–∞–¥ üîô"
        text = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ."
        keyboard = get_keyboard(button_name, placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
    await message.answer(text=text, reply_markup=keyboard)


@router.message(AdminToolsModule.adding_promo_sub_category, F.text)
async def adding_promo_subcategories_handler(message: types.Message, state: FSMContext):
    current_data = await state.get_data()
    button_name = current_data["buttons_category_names"]
    if message.text in button_name:
        await state.set_state(AdminToolsModule.adding_promo_product)
        step = current_data["step"]
        step.append(AdminToolsModule.adding_promo_sub_category)
        await state.update_data(category="products")
        sub_category_id = 0
        for i in current_data["buttons_category_list"]:
            print(f"i = {i}; i[1] = {i[1]}; text = {message.text}")
            if i[1].casefold() == message.text.casefold():
                sub_category_id = i[0]
                break
            else:
                print(f"Can`t find category id!")
        await state.update_data(sub_category_id=sub_category_id)
        await __get_category_keyboard(state,
                                      category_id=current_data["category_id"],
                                      sub_category_id=sub_category_id)

        current_data = await state.get_data()
        #  print(f"current data cat id: {current_data}")

        if current_data["buttons_category_list"]:
            text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–æ–º–æ-–∞–∫—Ü–∏—é ‚òùÔ∏è."
            for i in current_data["buttons_category_list"]:
                product = i[1]
                keyboard = build_choice_product_for_promo(product_id=i[0], reaction="adding promo")
                await message.answer(text=product, reply_markup=keyboard)
            keyboard = get_keyboard("–ó–∞–≤–µ—Ä—à–∏—Ç—å",
                                    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")
        else:
            text = "–ù–µ —É–¥–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

            keyboard = get_keyboard("–ù–∞–∑–∞–¥ üîô",
                                    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")
        await message.answer(text=text, reply_markup=keyboard)


@router.message(AdminToolsModule.adding_promo_sub_category)
async def wrong_adding_promo_subcategories(message: types.Message, state: FSMContext):
    current_data = await state.get_data()
    button_name = set(current_data["buttons_category_names"].copy())
    if button_name:
        button_name = list(button_name)
        text = f"–Ø –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤."
        keyboard = get_list_keyboard(button_name.copy(), placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
    else:
        button_name = "–ù–∞–∑–∞–¥ üîô"
        text = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ."
        keyboard = get_keyboard(button_name, placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
    await message.answer(text=text, reply_markup=keyboard)


#  -----------Function for get category of products for buttons-----------
async def __get_category_keyboard(state: FSMContext, category_id: int = 0, sub_category_id: int = 0) -> None:
    current_data = await state.get_data()
    #  pprint(f"curr data in get category = {current_data}")
    if current_data["category"] == "category":
        try:
            async with moto_db:
                buttons_list = await moto_db.get_categories()
                #  print(f"Buttons_list_category = {buttons_list}")
        except Exception as ex:
            print(f"Error list_category: {ex}")
    elif current_data["category"] == "sub_category":
        try:
            async with moto_db:
                buttons_list = await moto_db.get_sub_categories(category_id=category_id)
                #  print(f"Buttons_list_subcat = {buttons_list}")
        except Exception as ex:
            print(f"Error list_sub_category: {ex}")
    elif current_data["category"] == "products":
        try:
            async with moto_db:
                buttons_list = await moto_db.get_products_for_promo(category_id=category_id,
                                                                    sub_category_id=sub_category_id)
                print(f"button_list in products after db request = {buttons_list}")
                if buttons_list is None:
                    buttons_list = []
                    print(f"Anything wrong: Buttons_list_product = {buttons_list}")
        except Exception as ex:
            print(f"Error list_products buttons: {ex}")

    buttons_text = [x[1] for x in buttons_list]
    await state.update_data(buttons_category_list=buttons_list.copy(), buttons_category_names=buttons_text.copy())


# ---------------FINISH BLOCK--------------------
'''
    text = f"–í—ã –≤–Ω–µ—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
    text += f"{markdown.hbold(current_data['promo_title_name'])}\n\n"
    text += f"{current_data['promo_description']}\n\n"
    text += f"–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏: {current_data['promo_discount']}\n"
    if current_data["promo_start_date"] == "From activate":
        text += (f"–ø—Ä–æ–º–æ-–∞–∫—Ü–∏—è –Ω–∞—á–Ω–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –º–æ–º–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏ –ø—Ä–æ–¥–ª–∏—Ç—Å—è:"
                 f" {markdown.hcode(current_data['promo_valid_length'])}\n")
    else:
        text += f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∞–∫—Ü–∏–∏: {current_data['promo_start_date']}\n"
        text += f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–∫—Ü–∏–∏: {current_data['promo_end_date']}\n"

    keyboard = get_keyboard("–ù–∞–∑–∞–¥ üîô",
                            "–ó–∞–ø–∏—Å–∞—Ç—å –≤ –±–∞–∑—É üíΩ",
                            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")
    await message.answer(text=text, reply_markup=keyboard)
'''
